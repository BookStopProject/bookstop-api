package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"bookstop/models"
	"context"
	"fmt"
	"strconv"
)

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*models.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// BookSearch is the resolver for the bookSearch field.
func (r *queryResolver) BookSearch(ctx context.Context, query string) ([]*models.Book, error) {
	return models.SearchBooks(ctx, query)
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(ctx context.Context, id string) (*models.Author, error) {
	numId,_ := strconv.Atoi(id)
	return models.FindAuthorByID(ctx, numId)
}

// Genre is the resolver for the genre field.
func (r *queryResolver) Genre(ctx context.Context, id string) (*models.Genre, error) {
	numId,_ := strconv.Atoi(id)
	return models.FindGenreByID(ctx, numId)
}

// Genres is the resolver for the genres field.
func (r *queryResolver) Genres(ctx context.Context) ([]*models.Genre, error) {
	return models.FindAllGenres(ctx)
}
