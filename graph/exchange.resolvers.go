package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"bookstop/auth"
	"bookstop/models"
	"context"
	"fmt"
	"strconv"
)

// Exchange is the resolver for the exchange field.
func (r *mutationResolver) Exchange(ctx context.Context, bookCopyID []string) (*models.Invoice, error) {
	panic(fmt.Errorf("not implemented: Exchange - exchange"))
}

// BookCopiesAvailable is the resolver for the bookCopiesAvailable field.
func (r *queryResolver) BookCopiesAvailable(ctx context.Context, bookID string) ([]*models.BookCopy, error) {
	bookIdNum, _ := strconv.Atoi(bookID)
	return models.FindBookCopiesByBookIdWithLocation(ctx, bookIdNum)
}

// MeInvoices is the resolver for the meInvoices field.
func (r *queryResolver) MeInvoices(ctx context.Context) ([]*models.Invoice, error) {
	usr, err := auth.ForContext(ctx)
	if err != nil {
		return nil, err
	}
	if usr == nil {
		return nil, auth.ErrUnauthorized
	}

	return models.FindInvoicesByUserID(ctx, usr.ID)
}

// MeTradeIns is the resolver for the meTradeIns field.
func (r *queryResolver) MeTradeIns(ctx context.Context) ([]*models.TradeIn, error) {
	usr, err := auth.ForContext(ctx)
	if err != nil {
		return nil, err
	}
	if usr == nil {
		return nil, auth.ErrUnauthorized
	}

	return models.FindTradeInsByUserID(ctx, usr.ID)
}
