package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"bookstop/auth"
	"bookstop/models"
	"context"
	"strconv"
)

// MeUpdate is the resolver for the meUpdate field.
func (r *mutationResolver) MeUpdate(ctx context.Context, name string, bio *string, profilePicture *string) (*models.User, error) {
	usr, err := auth.ForContext(ctx)
	if err != nil {
		return nil, err
	}
	if usr == nil {
		return nil, auth.ErrUnauthorized
	}
	usr.Name = name
	if bio != nil {
		usr.Bio = bio
	}
	if profilePicture != nil {
		usr.ProfilePicture = profilePicture
	}
	return models.UpdateUser(ctx, usr)
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	return auth.ForContext(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	numId, _ := strconv.Atoi(id)
	return models.FindUserByID(ctx, numId)
}

// Credit is the resolver for the Credit field.
func (r *userResolver) Credit(ctx context.Context, obj *models.User) (*int, error) {
	usr, _ := auth.ForContext(ctx)
	// only allow authorized user to see credit
	if usr == nil || usr.ID != obj.ID {
		return nil, nil
	}
	return &obj.Credit, nil
}

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
