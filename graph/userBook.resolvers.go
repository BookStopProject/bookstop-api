package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"bookstop/auth"
	"bookstop/models"
	"context"
	"fmt"
	"strconv"
	"time"
)

// UserBookAdd is the resolver for the userBookAdd field.
func (r *mutationResolver) UserBookAdd(ctx context.Context, bookID string, startDate *string, endDate *string) (*models.UserBook, error) {
	usr, err := auth.ForContext(ctx)
	if err != nil {
		return nil, err
	}
	if usr == nil {
		return nil, auth.ErrUnauthorized
	}

	bookIDNum, _ := strconv.Atoi(bookID)
	var startDateObj *time.Time
	var endDateObj *time.Time
	if startDate != nil {
		startDateObj = &time.Time{}
		if err = startDateObj.UnmarshalText([]byte(*startDate)); err != nil {
			return nil, err
		}
	}
	if endDate != nil {
		endDateObj = &time.Time{}
		if err = endDateObj.UnmarshalText([]byte(*endDate)); err != nil {
			return nil, err
		}
	}
	userBook := models.UserBook{
		BookID:    bookIDNum,
		UserID:    usr.ID,
		StartDate: startDateObj,
		EndDate:   endDateObj,
	}

	return models.CreateUserBook(ctx, &userBook)
}

// UserBookEdit is the resolver for the userBookEdit field.
func (r *mutationResolver) UserBookEdit(ctx context.Context, id string, startDate *string, endDate *string) (*models.UserBook, error) {
	usr, err := auth.ForContext(ctx)
	if err != nil {
		return nil, err
	}
	if usr == nil {
		return nil, auth.ErrUnauthorized
	}
	idNum, _ := strconv.Atoi(id)
	userBook, err := models.FindUserBookByID(ctx, idNum)
	if err != nil {
		return nil, err
	}
	if userBook == nil {
		return nil, fmt.Errorf("userBook not found")
	}
	if userBook.IsOwner(usr.ID) == false {
		return nil, auth.ErrUnauthorized
	}

	if startDate != nil {
		startDateObj := &time.Time{}
		if err = startDateObj.UnmarshalText([]byte(*startDate)); err != nil {
			return nil, err
		}
		userBook.StartDate = startDateObj
	} else {
		userBook.StartDate = nil
	}
	if endDate != nil {
		endDateObj := &time.Time{}
		if err = endDateObj.UnmarshalText([]byte(*endDate)); err != nil {
			return nil, err
		}
		userBook.EndDate = endDateObj
	} else {
		userBook.EndDate = nil
	}

	return models.UpdateUserBook(ctx, userBook)
}

// UserBookDelete is the resolver for the userBookDelete field.
func (r *mutationResolver) UserBookDelete(ctx context.Context, id string) (bool, error) {
	usr, err := auth.ForContext(ctx)
	if err != nil {
		return false, err
	}
	if usr == nil {
		return false, auth.ErrUnauthorized
	}
	idNum, _ := strconv.Atoi(id)
	userBook, err := models.FindUserBookByID(ctx, idNum)
	if err != nil {
		return false, err
	}
	if userBook == nil {
		return false, fmt.Errorf("userBook not found")
	}
	if userBook.IsOwner(usr.ID) == false {
		return false, auth.ErrUnauthorized
	}

	err = models.DeleteUserBook(ctx, userBook.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UserBook is the resolver for the userBook field.
func (r *queryResolver) UserBook(ctx context.Context, id string) (*models.UserBook, error) {
	idNum, _ := strconv.Atoi(id)
	return models.FindUserBookByID(ctx, idNum)
}

// UserBooks is the resolver for the userBooks field.
func (r *queryResolver) UserBooks(ctx context.Context, userID *string) ([]*models.UserBook, error) {
	if userID == nil {
		panic(fmt.Errorf("not implemented: UserBooks - without userID"))
	}
	idNum, _ := strconv.Atoi(*userID)
	return models.FindUserBooksByUserID(ctx, idNum)
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
type userBookResolver struct{ *Resolver }
